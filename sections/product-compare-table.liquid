{% schema %}
{
  "name": "Product Compare Table",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Compare Products"
    },
    {
      "type": "product_list",
      "id": "products_to_compare",
      "label": "Select Products to Compare",
      "limit": 10
    }
  ],
  "presets": [
    {
      "name": "Product Compare Table"
    }
  ]
}
{% endschema %}

<div class="product-compare section">
  <div class="page-width">
    {% assign products = section.settings.products_to_compare %}

    {% if products.count > 0 %}
      <div id="table--draggable" class="compare-table-wrapper">
        <table>
          <thead>
            <tr>
              <th class="spec-header">Specifications</th>
              {% for product in products %}
                <th class="product-header">
                  <div class="product-image">
                    <img
                      src="{{ product.featured_image | image_url: width: 200 }}"
                      alt="{{ product.title }}"
                      width="200"
                      height="200"
                      loading="lazy"
                    >
                  </div>
                  <a href="{{ product.url }}" class="product-title link">{{ product.title }}</a>
                </th>
              {% endfor %}
            </tr>
          </thead>

          <tbody>
            <!-- Price -->
            <tr>
              <td class="spec-label">Price</td>
              {% for product in products %}
                <td class="spec-value">{{ product.price | money }}</td>
              {% endfor %}
            </tr>

            <!-- Cleaning Path -->
            <tr>
              <td class="spec-label">Cleaning Path</td>
              {% for product in products %}
                <td class="spec-value">{{ product.metafields.custom.cleaning_path.value }}</td>
              {% endfor %}
            </tr>

            <!-- Productivity -->
            <tr>
              <td class="spec-label">Brush Diameter</td>
              {% for product in products %}
                <td class="spec-value">{{ product.metafields.custom.brush_diameter.value }}</td>
              {% endfor %}
            </tr>

            <!-- Estimated Coverage -->
            <tr>
              <td class="spec-label">Estimated Coverage</td>
              {% for product in products %}
                <td class="spec-value">{{ product.metafields.custom.estimated_coverage.value }}</td>
              {% endfor %}
            </tr>

            <!-- Estimated Runtime -->
            <tr>
              <td class="spec-label">Estimated Run Time</td>
              {% for product in products %}
                <td class="spec-value">{{ product.metafields.custom.estimated_run_time.value }}</td>
              {% endfor %}
            </tr>

            <!-- Solution Tank -->
            <tr>
              <td class="spec-label">Solution Tank</td>
              {% for product in products %}
                <td class="spec-value">{{ product.metafields.custom.solution_tank_capacity.value }}</td>
              {% endfor %}
            </tr>

            <!-- Recovery Tank -->
            <tr>
              <td class="spec-label">Recovery Tank Capacity</td>
              {% for product in products %}
                <td class="spec-value">{{ product.metafields.custom.recovery_tank_capacity.value }}</td>
              {% endfor %}
            </tr>

            <!-- Battery -->
            <tr>
              <td class="spec-label">Battery</td>
              {% for product in products %}
                <td class="spec-value">{{ product.metafields.custom.battery.value }}</td>
              {% endfor %}
            </tr>

            <!-- Brush Motor -->
            <tr>
              <td class="spec-label">Brush Motor</td>
              {% for product in products %}
                <td class="spec-value">{{ product.metafields.custom.brush_motor.value }}</td>
              {% endfor %}
            </tr>

            <!-- Vacuum Motor -->
            <tr>
              <td class="spec-label">Vacuum Motor</td>
              {% for product in products %}
                <td class="spec-value">{{ product.metafields.custom.vacuum_motor.value }}</td>
              {% endfor %}
            </tr>

            <!-- Weight -->
            <tr>
              <td class="spec-label">Weight</td>
              {% for product in products %}
                <td class="spec-value">{{ product.metafields.custom.weight }}</td>
              {% endfor %}
            </tr>
          </tbody>
        </table>
      </div>
    {% else %}
      <div class="empty-state">Please select products to compare in the theme editor.</div>
    {% endif %}
  </div>
</div>

<style>
  .product-compare {
    padding: 60px 0;
  }

  .section-title {
    margin-bottom: 40px;
  }

  .compare-table-wrapper {
    overflow-x: auto;
  }

  .compare-table {
    width: 100%;
    border-collapse: collapse;
    min-width: 600px;
  }

  .compare-table th,
  .compare-table td {
    padding: 15px;
    border: 1px solid #ddd;
    text-align: center;
  }

  .spec-header,
  .spec-label {
    text-align: left;
    font-weight: bold;
    background-color: #f5f5f5;
  }

  .product-header {
    min-width: 200px;
  }

  .product-image {
    margin-bottom: 15px;
  }

  .product-image img {
    max-width: 100%;
    height: auto;
  }

  .empty-state {
    text-align: center;
    padding: 40px;
    background-color: #f5f5f5;
    border-radius: 4px;
  }

  @media screen and (max-width: 749px) {
    .product-compare {
      padding: 40px 0;
    }
  }
</style>

<script>
  const el = document.getElementById('table--draggable');
  let isDown = false;
  let startX;
  let scrollLeft;
  let scrollSens = 1.5;

  el.addEventListener('mousedown', (e) => {
    isDown = true;
    el.style.cursor = 'grabbing';
    startX = e.pageX - el.offsetLeft;
    scrollLeft = el.scrollLeft;
    console.log('mousedown');
  });

  el.addEventListener('mouseleave', () => {
    isDown = false;
    el.style.cursor = 'grab';
    console.log('mouseleave');
  });

  el.addEventListener('mouseup', () => {
    isDown = false;
    el.style.cursor = 'grab';
    console.log('mouseup');
  });

  el.addEventListener('mousemove', (e) => {
    if (!isDown) return;
    e.preventDefault();
    const x = e.pageX - el.offsetLeft;
    const walk = (x - startX) * scrollSens;
    el.scrollLeft = scrollLeft - walk;
    console.log('mousemove');
  });
</script>
